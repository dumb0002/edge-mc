---
- hosts: masters
  remote_user: ubuntu
  become: yes
  gather_facts: no
  vars:
    ks_release:  "{{ ks_release }}"
  tasks:
    - name: install jq and make
      shell: |
             sudo apt update
             sudo apt install jq make -y

    - name: install golang
      shell: |
             curl -LO https://go.dev/dl/go1.23.5.linux-amd64.tar.gz
             rm -rf /usr/local/go && tar -C /usr/local -xzf go1.23.5.linux-amd64.tar.gz
             export PATH=$PATH:/usr/local/go/bin
             go version
                  
    - name: install yq
      shell: |
             sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
             sudo chmod a+x /usr/local/bin/yq

    - name: install OCM CLI
      shell: curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/main/install.sh | bash
        
    - name: install KubeFlex
      shell: |
             sudo su <<EOF
             bash <(curl -s https://raw.githubusercontent.com/kubestellar/kubeflex/main/scripts/install-kubeflex.sh) --ensure-folder /usr/local/bin --strip-bin
             EOF

    - name: install Helm
      shell: |
             curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
             sudo apt-get install apt-transport-https --yes
             echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
             sudo apt-get update
             sudo apt-get install helm

    - name: Register a variable, ignore errors and continue
      ansible.builtin.command: kubectl config use-context kscore
      register: result
      ignore_errors: true

    - name: install ingress controller
      shell: |
             kubectl config rename-context kubernetes-admin@kubernetes kscore
             kubectl --context kscore label node --all ingress-ready="true"
             kubectl --context kscore apply -f https://raw.githubusercontent.com/kubestellar/kubestellar/refs/heads/release-0.25.1/example/kind-nginx-ingress-with-SSL-passthrough.yaml

    - name: Delete old KS deployment
      shell: |
             kubectl config rename-context kubernetes-admin@kubernetes kscore --ignore-not-found
             helm delete ks-core  --ignore-not-found
             helm -n open-cluster-management delete status-addon  --ignore-not-found
             kubectl --context kscore delete ns open-cluster-management-hub open-cluster-management  --ignore-not-found
             kubectl config unset contexts.wds1 --ignore-not-found
             kubectl --context kscore delete -f https://raw.githubusercontent.com/kubestellar/kubestellar/refs/heads/release-"{{ ks_release }}"/example/kind-nginx-ingress-with-SSL-passthrough.yaml  --ignore-not-found
      when: result is success

    - name: install KubeStellar using core helm-cart
      shell: |
             export KUBESTELLAR_VERSION="{{ ks_release }}"
             helm upgrade --install ks-core oci://ghcr.io/kubestellar/kubestellar/core-chart \
             --version $KUBESTELLAR_VERSION \
             --set-json='ITSes=[{"name":"its1","type":"host"}]' \
             --set-json='WDSes=[{"name":"wds1"}]' \
             --set-json='verbosity.default=5'

    - name: Get kubeconfig "context" for wds1 space
      shell: |
             kflex ctx wds1

    - name: update wds1 space with the correct port for the ingress controller
      shell: kubectl --context kscore -n ingress-nginx get svc ingress-nginx-controller -o=jsonpath='{.spec.ports[1].nodePort}'
      register: ingress_port

    # - name: Debugging message
    #   ansible.builtin.debug:
    #    msg: "{{ ingress_port.stdout }}"

    - name: Replace old hostname with new hostname (requires Ansible >= 2.4)
      ansible.builtin.replace:
        path: /root/.kube/config
        regexp: '(\s+)https://wds1\.localtest\.me:9443(\s+.*)?$'
        replace: '\1https://wds1.localtest.me:{{ ingress_port.stdout }}\2'


    - name: Sleep for 30 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 30
      delegate_to: localhost

    - name: Get the token to register managed clusters
      shell: clusteradm --context kscore get token | grep '^clusteradm join'
      register: wec_join_command
      until: "wec_join_command is not failed"
      retries: 3
      delay: 10
    
    - name: Set some environment configurations for the end user
      shell: |
             alias k="kubectl"
             k config use-context kscore
             
    - name: Copy join command to local file (Ansible control node)
      local_action: copy content="{{ wec_join_command.stdout }}" dest="/tmp/wec_join_command" mode=0777
            
    


